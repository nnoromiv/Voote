package com.example.voote.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/LFDT-web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.7.0.
 *  @noinspection deprecation
 */

@SuppressWarnings({"unused", "rawtypes"})
public class Voote extends Contract {
    public static final String BINARY = "";

    private static String librariesLinkedBinary;

    public static final String FUNC_ADDADMIN = "addAdmin";

    public static final String FUNC_ALLELECTIONIDS = "allElectionIds";

    public static final String FUNC_BANADDRESSFROMELECTION = "banAddressFromElection";

    public static final String FUNC_CREATEELECTION = "createElection";

    public static final String FUNC_ELECTIONCANDIDATES = "electionCandidates";

    public static final String FUNC_ELECTIONCOUNTER = "electionCounter";

    public static final String FUNC_ELECTIONS = "elections";

    public static final String FUNC_GETADMINS = "getAdmins";

    public static final String FUNC_GETALLELECTIONSWITHCANDIDATES = "getAllElectionsWithCandidates";

    public static final String FUNC_GETCANDIDATE = "getCandidate";

    public static final String FUNC_GETELECTION = "getElection";

    public static final String FUNC_GETRESULTBREAKDOWN = "getResultBreakdown";

    public static final String FUNC_GETWINNER = "getWinner";

    public static final String FUNC_HASUSERVOTED = "hasUserVoted";

    public static final String FUNC_HASVOTED = "hasVoted";

    public static final String FUNC_ISBANNEDFROMELECTION = "isBannedFromElection";

    public static final String FUNC_ISCANDIDATEREGISTERED = "isCandidateRegistered";

    public static final String FUNC_ISELECTIONADMIN = "isElectionAdmin";

    public static final String FUNC_MAXADMINPERELECTION = "maxAdminPerElection";

    public static final String FUNC_REGISTERCANDIDATE = "registerCandidate";

    public static final String FUNC_REMOVEELECTIONADMIN = "removeElectionAdmin";

    public static final String FUNC_SETRESULTSVISIBILITY = "setResultsVisibility";

    public static final String FUNC_SETTOTALPOSSIBLEELECTIONS = "setTotalPossibleElections";

    public static final String FUNC_TOGGLEELECTIONACTIVE = "toggleElectionActive";

    public static final String FUNC_TOTALPOSSIBLEELECTION = "totalPossibleElection";

    public static final String FUNC_UNBANADDRESSFROMELECTION = "unbanAddressFromElection";

    public static final String FUNC_VOTE = "vote";

    public static final Event ADMINADDED_EVENT = new Event("AdminAdded",
            List.of(new TypeReference<Uint16>(true) {}, new TypeReference<Address>(true) {}));

    public static final Event ADMINREMOVED_EVENT = new Event("AdminRemoved",
            List.of(new TypeReference<Uint16>(true) {}, new TypeReference<Address>(true) {}));

    public static final Event CANDIDATEREGISTERED_EVENT = new Event("CandidateRegistered",
            List.of(new TypeReference<Uint16>(true) {}, new TypeReference<Uint8>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));

    public static final Event ELECTIONCREATED_EVENT = new Event("ElectionCreated",
            List.of(new TypeReference<Uint16>(true) {}, new TypeReference<Utf8String>() {}));

    public static final Event ELECTIONDEACTIVATED_EVENT = new Event("ElectionDeactivated",
            List.of(new TypeReference<Uint16>(true) { }));

    public static final Event RESULTSVISIBILITYUPDATED_EVENT = new Event("ResultsVisibilityUpdated",
            List.of(new TypeReference<Uint16>(true) {}, new TypeReference<Bool>() {}));

    public static final Event USERBANNED_EVENT = new Event("UserBanned",
            List.of(new TypeReference<Uint16>(true) {}, new TypeReference<Address>(true) {}));

    public static final Event USERUNBANNED_EVENT = new Event("UserUnbanned",
            List.of(new TypeReference<Uint16>(true) {}, new TypeReference<Address>(true) {}));

    public static final Event VOTECAST_EVENT = new Event("VoteCast",
            List.of(new TypeReference<Uint16>(true) {}, new TypeReference<Uint8>(true) {}, new TypeReference<Address>() {}));

    protected Voote(String contractAddress, Web3j web3j, Credentials credentials,
                    BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Voote(String contractAddress, Web3j web3j, Credentials credentials,
                    ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    protected Voote(String contractAddress, Web3j web3j, TransactionManager transactionManager,
                    BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Voote(String contractAddress, Web3j web3j, TransactionManager transactionManager,
                    ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<AdminAddedEventResponse> getAdminAddedEvents(TransactionReceipt transactionReceipt) {
        List<AdminAddedEventResponse> responses = new ArrayList<>();

        for (Log log : transactionReceipt.getLogs()) {
            Contract.EventValuesWithLog eventValues = Contract.staticExtractEventParametersWithLog(ADMINADDED_EVENT, log);
            if (eventValues != null) {
                AdminAddedEventResponse typedResponse = new AdminAddedEventResponse();
                typedResponse.log = log;
                typedResponse.electionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.admin = (String) eventValues.getIndexedValues().get(1).getValue();
                responses.add(typedResponse);
            }
        }

        return responses;
    }

    public static AdminAddedEventResponse getAdminAddedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ADMINADDED_EVENT, log);
        AdminAddedEventResponse typedResponse = new AdminAddedEventResponse();
        typedResponse.log = log;
        typedResponse.electionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.admin = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<AdminAddedEventResponse> adminAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(Voote::getAdminAddedEventFromLog);
    }

    public Flowable<AdminAddedEventResponse> adminAddedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADMINADDED_EVENT));
        return adminAddedEventFlowable(filter);
    }

    public static List<AdminRemovedEventResponse> getAdminRemovedEvents(TransactionReceipt transactionReceipt) {
        List<AdminRemovedEventResponse> responses = new ArrayList<>();

        for (Log log : transactionReceipt.getLogs()) {
            Contract.EventValuesWithLog eventValues = Contract.staticExtractEventParametersWithLog(ADMINREMOVED_EVENT, log);
            if (eventValues != null) {
                AdminRemovedEventResponse typedResponse = new AdminRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.electionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.admin = (String) eventValues.getIndexedValues().get(1).getValue();
                responses.add(typedResponse);
            }
        }

        return responses;
    }

    public static AdminRemovedEventResponse getAdminRemovedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ADMINREMOVED_EVENT, log);
        AdminRemovedEventResponse typedResponse = new AdminRemovedEventResponse();
        typedResponse.log = log;
        typedResponse.electionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.admin = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<AdminRemovedEventResponse> adminRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(Voote::getAdminRemovedEventFromLog);
    }

    public Flowable<AdminRemovedEventResponse> adminRemovedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADMINREMOVED_EVENT));
        return adminRemovedEventFlowable(filter);
    }

    public static List<CandidateRegisteredEventResponse> getCandidateRegisteredEvents(
            TransactionReceipt transactionReceipt) {

        List<CandidateRegisteredEventResponse> responses = new ArrayList<>();

        for (Log log : transactionReceipt.getLogs()) {
            Contract.EventValuesWithLog eventValues = Contract.staticExtractEventParametersWithLog(CANDIDATEREGISTERED_EVENT, log);

            if (eventValues != null) {
                CandidateRegisteredEventResponse typedResponse = new CandidateRegisteredEventResponse();
                typedResponse.log = log;
                typedResponse.electionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.candidateId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.addr = (String) eventValues.getNonIndexedValues().get(1).getValue();
                responses.add(typedResponse);
            }
        }

        return responses;
    }

    public static CandidateRegisteredEventResponse getCandidateRegisteredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(CANDIDATEREGISTERED_EVENT, log);
        CandidateRegisteredEventResponse typedResponse = new CandidateRegisteredEventResponse();
        typedResponse.log = log;
        typedResponse.electionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.candidateId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.name = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.addr = (String) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<CandidateRegisteredEventResponse> candidateRegisteredEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(Voote::getCandidateRegisteredEventFromLog);
    }

    public Flowable<CandidateRegisteredEventResponse> candidateRegisteredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CANDIDATEREGISTERED_EVENT));
        return candidateRegisteredEventFlowable(filter);
    }

    public static List<ElectionCreatedEventResponse> getElectionCreatedEvents(TransactionReceipt transactionReceipt) {
        List<ElectionCreatedEventResponse> responses = new ArrayList<>();

        for (Log log : transactionReceipt.getLogs()) {
            Contract.EventValuesWithLog eventValues = Contract.staticExtractEventParametersWithLog(ELECTIONCREATED_EVENT, log);

            if (eventValues != null) {
                ElectionCreatedEventResponse typedResponse = new ElectionCreatedEventResponse();
                typedResponse.log = log;
                typedResponse.electionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.title = (String) eventValues.getNonIndexedValues().get(0).getValue();
                responses.add(typedResponse);
            }
        }

        return responses;
    }

    public static ElectionCreatedEventResponse getElectionCreatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ELECTIONCREATED_EVENT, log);
        ElectionCreatedEventResponse typedResponse = new ElectionCreatedEventResponse();
        typedResponse.log = log;
        typedResponse.electionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.title = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ElectionCreatedEventResponse> electionCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(Voote::getElectionCreatedEventFromLog);
    }

    public Flowable<ElectionCreatedEventResponse> electionCreatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ELECTIONCREATED_EVENT));
        return electionCreatedEventFlowable(filter);
    }

    public static List<ElectionDeactivatedEventResponse> getElectionDeactivatedEvents(TransactionReceipt transactionReceipt) {
        List<ElectionDeactivatedEventResponse> responses = new ArrayList<>();

        for (Log log : transactionReceipt.getLogs()) {
            Contract.EventValuesWithLog eventValues = Contract.staticExtractEventParametersWithLog(ELECTIONDEACTIVATED_EVENT, log);

            if (eventValues != null) {
                ElectionDeactivatedEventResponse typedResponse = new ElectionDeactivatedEventResponse();
                typedResponse.log = log;
                typedResponse.electionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                responses.add(typedResponse);
            }
        }

        return responses;
    }

    public static ElectionDeactivatedEventResponse getElectionDeactivatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ELECTIONDEACTIVATED_EVENT, log);
        ElectionDeactivatedEventResponse typedResponse = new ElectionDeactivatedEventResponse();
        typedResponse.log = log;
        typedResponse.electionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ElectionDeactivatedEventResponse> electionDeactivatedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(Voote::getElectionDeactivatedEventFromLog);
    }

    public Flowable<ElectionDeactivatedEventResponse> electionDeactivatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ELECTIONDEACTIVATED_EVENT));
        return electionDeactivatedEventFlowable(filter);
    }

    public static List<ResultsVisibilityUpdatedEventResponse> getResultsVisibilityUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<ResultsVisibilityUpdatedEventResponse> responses = new ArrayList<>();

        for (Log log : transactionReceipt.getLogs()) {
            Contract.EventValuesWithLog eventValues = Contract.staticExtractEventParametersWithLog(RESULTSVISIBILITYUPDATED_EVENT, log);

            if (eventValues != null) {
                ResultsVisibilityUpdatedEventResponse typedResponse = new ResultsVisibilityUpdatedEventResponse();
                typedResponse.log = log;
                typedResponse.electionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.visible = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                responses.add(typedResponse);
            }
        }

        return responses;
    }

    public static ResultsVisibilityUpdatedEventResponse getResultsVisibilityUpdatedEventFromLog(
            Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(RESULTSVISIBILITYUPDATED_EVENT, log);
        ResultsVisibilityUpdatedEventResponse typedResponse = new ResultsVisibilityUpdatedEventResponse();
        typedResponse.log = log;
        typedResponse.electionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.visible = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ResultsVisibilityUpdatedEventResponse> resultsVisibilityUpdatedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(Voote::getResultsVisibilityUpdatedEventFromLog);
    }

    public Flowable<ResultsVisibilityUpdatedEventResponse> resultsVisibilityUpdatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RESULTSVISIBILITYUPDATED_EVENT));
        return resultsVisibilityUpdatedEventFlowable(filter);
    }

    public static List<UserBannedEventResponse> getUserBannedEvents(TransactionReceipt transactionReceipt) {
        List<UserBannedEventResponse> responses = new ArrayList<>();

        for (Log log : transactionReceipt.getLogs()) {
            Contract.EventValuesWithLog eventValues = Contract.staticExtractEventParametersWithLog(USERBANNED_EVENT, log);

            if (eventValues != null) {
                UserBannedEventResponse typedResponse = new UserBannedEventResponse();
                typedResponse.log = log;
                typedResponse.electionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.user = (String) eventValues.getIndexedValues().get(1).getValue();
                responses.add(typedResponse);
            }
        }

        return responses;
    }

    public static UserBannedEventResponse getUserBannedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(USERBANNED_EVENT, log);
        UserBannedEventResponse typedResponse = new UserBannedEventResponse();
        typedResponse.log = log;
        typedResponse.electionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.user = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<UserBannedEventResponse> userBannedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(Voote::getUserBannedEventFromLog);
    }

    public Flowable<UserBannedEventResponse> userBannedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(USERBANNED_EVENT));
        return userBannedEventFlowable(filter);
    }

    public static List<UserUnbannedEventResponse> getUserUnbannedEvents(TransactionReceipt transactionReceipt) {
        List<UserUnbannedEventResponse> responses = new ArrayList<>();

        for (Log log : transactionReceipt.getLogs()) {
            Contract.EventValuesWithLog eventValues = Contract.staticExtractEventParametersWithLog(USERUNBANNED_EVENT, log);

            if (eventValues != null) {
                UserUnbannedEventResponse typedResponse = new UserUnbannedEventResponse();
                typedResponse.log = log;
                typedResponse.electionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.user = (String) eventValues.getIndexedValues().get(1).getValue();
                responses.add(typedResponse);
            }
        }

        return responses;
    }

    public static UserUnbannedEventResponse getUserUnbannedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(USERUNBANNED_EVENT, log);
        UserUnbannedEventResponse typedResponse = new UserUnbannedEventResponse();
        typedResponse.log = log;
        typedResponse.electionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.user = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<UserUnbannedEventResponse> userUnbannedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(Voote::getUserUnbannedEventFromLog);
    }

    public Flowable<UserUnbannedEventResponse> userUnbannedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(USERUNBANNED_EVENT));
        return userUnbannedEventFlowable(filter);
    }

    public static List<VoteCastEventResponse> getVoteCastEvents(TransactionReceipt transactionReceipt) {
        List<VoteCastEventResponse> responses = new ArrayList<>();

        for (Log log : transactionReceipt.getLogs()) {
            EventValuesWithLog eventValues = Contract.staticExtractEventParametersWithLog(VOTECAST_EVENT, log);

            if (eventValues != null) {
                VoteCastEventResponse typedResponse = new VoteCastEventResponse();
                typedResponse.log = log;
                typedResponse.electionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.candidateId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.voter = (String) eventValues.getNonIndexedValues().get(0).getValue();
                responses.add(typedResponse);
            }
        }

        return responses;
    }

    public static VoteCastEventResponse getVoteCastEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(VOTECAST_EVENT, log);
        VoteCastEventResponse typedResponse = new VoteCastEventResponse();
        typedResponse.log = log;
        typedResponse.electionId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.candidateId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.voter = (String) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<VoteCastEventResponse> voteCastEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(Voote::getVoteCastEventFromLog);
    }

    public Flowable<VoteCastEventResponse> voteCastEventFlowable(DefaultBlockParameter startBlock,
                                                                 DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VOTECAST_EVENT));
        return voteCastEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> addAdmin(BigInteger electionId, String admin) {
        final Function function = new Function(
                FUNC_ADDADMIN,
                List.of(new org.web3j.abi.datatypes.generated.Uint16(electionId),
                        new org.web3j.abi.datatypes.Address(160, admin)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> allElectionIds(BigInteger param0) {
        final Function function = new Function(FUNC_ALLELECTIONIDS,
                List.of(new org.web3j.abi.datatypes.generated.Uint256(param0)),
                List.of(new TypeReference<Uint16>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> banAddressFromElection(BigInteger electionId,
                                                                         String user) {
        final Function function = new Function(
                FUNC_BANADDRESSFROMELECTION,
                List.of(new org.web3j.abi.datatypes.generated.Uint16(electionId),
                        new org.web3j.abi.datatypes.Address(160, user)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createElection(String title, BigInteger startTime,
                                                                 BigInteger endTime) {
        final Function function = new Function(
                FUNC_CREATEELECTION,
                List.of(new org.web3j.abi.datatypes.Utf8String(title),
                        new org.web3j.abi.datatypes.generated.Uint32(startTime),
                        new org.web3j.abi.datatypes.generated.Uint32(endTime)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple3<String, String, BigInteger>> electionCandidates(
            BigInteger param0, BigInteger param1) {
        final Function function = new Function(FUNC_ELECTIONCANDIDATES,
                Arrays.asList(new org.web3j.abi.datatypes.generated.Uint16(param0),
                        new org.web3j.abi.datatypes.generated.Uint8(param1)),
                Arrays.asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint16>() {}));
        return new RemoteFunctionCall<>(function,
                () -> {
                    List<Type> results = executeCallMultipleValueReturn(function);
                    return new Tuple3<>(
                            (String) results.get(0).getValue(),
                            (String) results.get(1).getValue(),
                            (BigInteger) results.get(2).getValue());
                });
    }

    public RemoteFunctionCall<BigInteger> electionCounter() {
        final Function function = new Function(FUNC_ELECTIONCOUNTER,
                List.of(),
                List.of(new TypeReference<Uint16>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple7<String, String, BigInteger, BigInteger, BigInteger, Boolean, Boolean>> elections(
            BigInteger param0) {
        final Function function = new Function(FUNC_ELECTIONS,
                List.of(new Uint16(param0)),
                Arrays.asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint8>() {}, new TypeReference<Bool>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<>(function,
                () -> {
                    List<Type> results = executeCallMultipleValueReturn(function);
                    return new Tuple7<>(
                            (String) results.get(0).getValue(),
                            (String) results.get(1).getValue(),
                            (BigInteger) results.get(2).getValue(),
                            (BigInteger) results.get(3).getValue(),
                            (BigInteger) results.get(4).getValue(),
                            (Boolean) results.get(5).getValue(),
                            (Boolean) results.get(6).getValue());
                });
    }

    @SuppressWarnings("unchecked")
    public RemoteFunctionCall<List> getAdmins(BigInteger electionId) {
        final Function function = new Function(FUNC_GETADMINS,
                List.of(new Uint16(electionId)),
                List.of(new TypeReference<DynamicArray<Address>>() {
                }));
        return new RemoteFunctionCall<>(function,
                () -> {
                    List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                    return convertToNative(result);
                });
    }

    @SuppressWarnings("unchecked")
    public RemoteFunctionCall<Tuple5<List<BigInteger>, List<String>, List<String>, List<List<String>>, List<List<String>>>> getAllElectionsWithCandidates(
    ) {
        final Function function = new Function(FUNC_GETALLELECTIONSWITHCANDIDATES,
                List.of(),
                Arrays.asList(new TypeReference<DynamicArray<Uint16>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<DynamicArray<Utf8String>>>() {}, new TypeReference<DynamicArray<DynamicArray<Address>>>() {}));
        return new RemoteFunctionCall<>(function,
                () -> {
                    List<Type> results = executeCallMultipleValueReturn(function);
                    return new Tuple5<>(
                            convertToNative((List<Uint16>) results.get(0).getValue()),
                            convertToNative((List<Utf8String>) results.get(1).getValue()),
                            convertToNative((List<Address>) results.get(2).getValue()),
                            convertToNative((List<DynamicArray<Utf8String>>) results.get(3).getValue()),
                            convertToNative((List<DynamicArray<Address>>) results.get(4).getValue()));
                });
    }

    public RemoteFunctionCall<Candidate> getCandidate(BigInteger electionId,
                                                      BigInteger candidateId) {
        final Function function = new Function(FUNC_GETCANDIDATE,
                List.of(new org.web3j.abi.datatypes.generated.Uint16(electionId),
                        new org.web3j.abi.datatypes.generated.Uint8(candidateId)),
                List.of(new TypeReference<Candidate>() {}));
        return executeRemoteCallSingleValueReturn(function, Candidate.class);
    }

    public RemoteFunctionCall<Election> getElection(BigInteger electionId) {
        final Function function = new Function(FUNC_GETELECTION,
                List.of(new org.web3j.abi.datatypes.generated.Uint16(electionId)),
                List.of(new TypeReference<Election>() {}));
        return executeRemoteCallSingleValueReturn(function, Election.class);
    }

    @SuppressWarnings("unchecked")
    public RemoteFunctionCall<Tuple5<List<String>, BigInteger, BigInteger, List<BigInteger>, List<BigInteger>>> getResultBreakdown(
            BigInteger electionId) {
        final Function function = new Function(FUNC_GETRESULTBREAKDOWN,
                List.of(new Uint16(electionId)),
                Arrays.asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint32>() {}, new TypeReference<DynamicArray<Uint16>>() {}, new TypeReference<DynamicArray<Uint16>>() {}));
        return new RemoteFunctionCall<>(function,
                () -> {
                    List<Type> results = executeCallMultipleValueReturn(function);
                    return new Tuple5<>(
                            convertToNative((List<Utf8String>) results.get(0).getValue()),
                            (BigInteger) results.get(1).getValue(),
                            (BigInteger) results.get(2).getValue(),
                            convertToNative((List<Uint16>) results.get(3).getValue()),
                            convertToNative((List<Uint16>) results.get(4).getValue()));
                });
    }

    @SuppressWarnings("unchecked")
    public RemoteFunctionCall<Tuple3<List<String>, List<String>, BigInteger>> getWinner(
            BigInteger electionId) {
        final Function function = new Function(FUNC_GETWINNER,
                List.of(new Uint16(electionId)),
                Arrays.asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Uint16>() {}));
        return new RemoteFunctionCall<>(function,
                () -> {
                    List<Type> results = executeCallMultipleValueReturn(function);
                    return new Tuple3<>(
                            convertToNative((List<Utf8String>) results.get(0).getValue()),
                            convertToNative((List<Address>) results.get(1).getValue()),
                            (BigInteger) results.get(2).getValue());
                });
    }

    public RemoteFunctionCall<Boolean> hasUserVoted(BigInteger electionId, String userAddress) {
        final Function function = new Function(FUNC_HASUSERVOTED,
                List.of(new org.web3j.abi.datatypes.generated.Uint16(electionId),
                        new org.web3j.abi.datatypes.Address(160, userAddress)),
                List.of(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> hasVoted(BigInteger param0, String param1) {
        final Function function = new Function(FUNC_HASVOTED,
                List.of(new org.web3j.abi.datatypes.generated.Uint16(param0),
                        new org.web3j.abi.datatypes.Address(160, param1)),
                List.of(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isBannedFromElection(BigInteger param0, String param1) {
        final Function function = new Function(FUNC_ISBANNEDFROMELECTION,
                List.of(new org.web3j.abi.datatypes.generated.Uint16(param0),
                        new org.web3j.abi.datatypes.Address(160, param1)),
                List.of(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isCandidateRegistered(BigInteger param0, String param1) {
        final Function function = new Function(FUNC_ISCANDIDATEREGISTERED,
                List.of(new org.web3j.abi.datatypes.generated.Uint16(param0),
                        new org.web3j.abi.datatypes.Address(160, param1)),
                List.of(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isElectionAdmin(BigInteger param0, String param1) {
        final Function function = new Function(FUNC_ISELECTIONADMIN,
                List.of(new org.web3j.abi.datatypes.generated.Uint16(param0),
                        new org.web3j.abi.datatypes.Address(160, param1)),
                List.of(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> maxAdminPerElection() {
        final Function function = new Function(FUNC_MAXADMINPERELECTION,
                List.of(),
                List.of(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> registerCandidate(BigInteger electionId,
                                                                    String candidateName, String candidateAddress) {
        final Function function = new Function(
                FUNC_REGISTERCANDIDATE,
                List.of(new org.web3j.abi.datatypes.generated.Uint16(electionId),
                        new org.web3j.abi.datatypes.Utf8String(candidateName),
                        new org.web3j.abi.datatypes.Address(160, candidateAddress)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> removeElectionAdmin(BigInteger electionId,
                                                                      String admin) {
        final Function function = new Function(
                FUNC_REMOVEELECTIONADMIN,
                List.of(new org.web3j.abi.datatypes.generated.Uint16(electionId),
                        new org.web3j.abi.datatypes.Address(160, admin)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setResultsVisibility(BigInteger electionId,
                                                                       Boolean visible) {
        final Function function = new Function(
                FUNC_SETRESULTSVISIBILITY,
                List.of(new org.web3j.abi.datatypes.generated.Uint16(electionId),
                        new org.web3j.abi.datatypes.Bool(visible)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setTotalPossibleElections(BigInteger value) {
        final Function function = new Function(
                FUNC_SETTOTALPOSSIBLEELECTIONS,
                List.of(new org.web3j.abi.datatypes.generated.Uint16(value)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> toggleElectionActive(BigInteger electionId) {
        final Function function = new Function(
                FUNC_TOGGLEELECTIONACTIVE,
                List.of(new Uint16(electionId)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> totalPossibleElection() {
        final Function function = new Function(FUNC_TOTALPOSSIBLEELECTION,
                List.of(),
                List.of(new TypeReference<Uint16>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> unbanAddressFromElection(BigInteger electionId,
                                                                           String user) {
        final Function function = new Function(
                FUNC_UNBANADDRESSFROMELECTION,
                List.of(new org.web3j.abi.datatypes.generated.Uint16(electionId),
                        new org.web3j.abi.datatypes.Address(160, user)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> vote(BigInteger electionId,
                                                       BigInteger candidateId) {
        final Function function = new Function(
                FUNC_VOTE,
                List.of(new org.web3j.abi.datatypes.generated.Uint16(electionId),
                        new org.web3j.abi.datatypes.generated.Uint8(candidateId)),
                Collections.emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Voote load(String contractAddress, Web3j web3j, Credentials credentials,
                             BigInteger gasPrice, BigInteger gasLimit) {
        return new Voote(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Voote load(String contractAddress, Web3j web3j,
                             TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Voote(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Voote load(String contractAddress, Web3j web3j, Credentials credentials,
                             ContractGasProvider contractGasProvider) {
        return new Voote(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Voote load(String contractAddress, Web3j web3j,
                             TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Voote(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Voote> deploy(Web3j web3j, Credentials credentials,
                                           ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Voote.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<Voote> deploy(Web3j web3j, Credentials credentials,
                                           BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Voote.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    public static RemoteCall<Voote> deploy(Web3j web3j, TransactionManager transactionManager,
                                           ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Voote.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<Voote> deploy(Web3j web3j, TransactionManager transactionManager,
                                           BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Voote.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

//    public static void linkLibraries(List<Contract.LinkReference> references) {
//        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
//    }

    private static String getDeploymentBinary() {
        return Objects.requireNonNullElse(librariesLinkedBinary, BINARY);
    }

    public static class Candidate extends DynamicStruct {
        public final String candidateName;

        public final String candidateAddress;

        public final BigInteger voteCount;

        public Candidate(String candidateName, String candidateAddress, BigInteger voteCount) {
            super(new org.web3j.abi.datatypes.Utf8String(candidateName),
                    new org.web3j.abi.datatypes.Address(160, candidateAddress),
                    new org.web3j.abi.datatypes.generated.Uint16(voteCount));
            this.candidateName = candidateName;
            this.candidateAddress = candidateAddress;
            this.voteCount = voteCount;
        }

        public Candidate(Utf8String candidateName, Address candidateAddress, Uint16 voteCount) {
            super(candidateName, candidateAddress, voteCount);
            this.candidateName = candidateName.getValue();
            this.candidateAddress = candidateAddress.getValue();
            this.voteCount = voteCount.getValue();
        }
    }

    public static class Election extends DynamicStruct {
        public final String electionTitle;

        public final String creator;

        public final BigInteger startTime;

        public final BigInteger endTime;

        public final BigInteger candidateCount;

        public final Boolean isActive;

        public final Boolean resultsVisible;

        public Election(String electionTitle, String creator, BigInteger startTime,
                        BigInteger endTime, BigInteger candidateCount, Boolean isActive,
                        Boolean resultsVisible) {
            super(new org.web3j.abi.datatypes.Utf8String(electionTitle),
                    new org.web3j.abi.datatypes.Address(160, creator),
                    new org.web3j.abi.datatypes.generated.Uint32(startTime),
                    new org.web3j.abi.datatypes.generated.Uint32(endTime),
                    new org.web3j.abi.datatypes.generated.Uint8(candidateCount),
                    new org.web3j.abi.datatypes.Bool(isActive),
                    new org.web3j.abi.datatypes.Bool(resultsVisible));
            this.electionTitle = electionTitle;
            this.creator = creator;
            this.startTime = startTime;
            this.endTime = endTime;
            this.candidateCount = candidateCount;
            this.isActive = isActive;
            this.resultsVisible = resultsVisible;
        }

        public Election(Utf8String electionTitle, Address creator, Uint32 startTime, Uint32 endTime,
                        Uint8 candidateCount, Bool isActive, Bool resultsVisible) {
            super(electionTitle, creator, startTime, endTime, candidateCount, isActive, resultsVisible);
            this.electionTitle = electionTitle.getValue();
            this.creator = creator.getValue();
            this.startTime = startTime.getValue();
            this.endTime = endTime.getValue();
            this.candidateCount = candidateCount.getValue();
            this.isActive = isActive.getValue();
            this.resultsVisible = resultsVisible.getValue();
        }
    }

    public static class AdminAddedEventResponse extends BaseEventResponse {
        public BigInteger electionId;

        public String admin;
    }

    public static class AdminRemovedEventResponse extends BaseEventResponse {
        public BigInteger electionId;

        public String admin;
    }

    public static class CandidateRegisteredEventResponse extends BaseEventResponse {
        public BigInteger electionId;

        public BigInteger candidateId;

        public String name;

        public String addr;
    }

    public static class ElectionCreatedEventResponse extends BaseEventResponse {
        public BigInteger electionId;

        public String title;
    }

    public static class ElectionDeactivatedEventResponse extends BaseEventResponse {
        public BigInteger electionId;
    }

    public static class ResultsVisibilityUpdatedEventResponse extends BaseEventResponse {
        public BigInteger electionId;

        public Boolean visible;
    }

    public static class UserBannedEventResponse extends BaseEventResponse {
        public BigInteger electionId;

        public String user;
    }

    public static class UserUnbannedEventResponse extends BaseEventResponse {
        public BigInteger electionId;

        public String user;
    }

    public static class VoteCastEventResponse extends BaseEventResponse {
        public BigInteger electionId;

        public BigInteger candidateId;

        public String voter;
    }
}
